/** combo_atomeseUTest.cxxtest ---
 *
 * Copyright (C) 2018 OpenCog Foundation
 *
 * Author: Kasim Ebrahim
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */


#include <opencog/combo/converter/combo_atomese.h>
#include <opencog/combo/combo/combo.h>
#include <opencog/atoms/atom_types/atom_types.h>
#include <opencog/atoms/base/Handle.h>
#include <opencog/atoms/base/Link.h>
#include <opencog/atoms/base/Node.h>
#include <opencog/atoms/core/NumberNode.h>


using namespace std;
using namespace opencog;


class combo_atomeseUTest : public CxxTest::TestSuite
{

public:
	void test_atomese_combo_predicate(void)
	{
		combo::combo_tree tr = combo::str2combo_tree("and(or($1 $2) not($3))", {});

		combo::ComboToAtomese to_atomese;
		Handle h = to_atomese(tr);

		HandleSeq list_or = {createNode(PREDICATE_NODE, "$1"), createNode(PREDICATE_NODE, "$2")};
		Handle or_link = createLink(list_or, OR_LINK);

		HandleSeq list_not = {createNode(PREDICATE_NODE, "$3")};
		Handle not_link = createLink(list_not, NOT_LINK);

		HandleSeq list_and = {or_link, not_link};
		Handle and_link = createLink(list_and, AND_LINK);

		TS_ASSERT(content_eq(h, and_link));

	}

	void test_atomese_combo_schema(void)
	{
		combo::combo_tree tr = combo::str2combo_tree("+($1 $2)", {});

		combo::ComboToAtomese to_atomese;
		Handle h = to_atomese(tr);

		HandleSeq list_plus = {createNode(SCHEMA_NODE, "$1"), createNode(SCHEMA_NODE, "$2")};
		Handle plus_link = createLink(list_plus, PLUS_LINK);

		TS_ASSERT(content_eq(h, plus_link));

	}

	void test_atomese_combo_true_link(void)
	{
		combo::combo_tree tr = combo::str2combo_tree("true", {});

		combo::ComboToAtomese to_atomese;
		Handle h = to_atomese(tr);

		Handle true_link = createLink(TRUE_LINK);

		TS_ASSERT(content_eq(h, true_link));

	}

	void test_atomese_combo_false_link(void)
	{
		combo::combo_tree tr = combo::str2combo_tree("false", {});

		combo::ComboToAtomese to_atomese;
		Handle h = to_atomese(tr);

		Handle false_link = createLink(FALSE_LINK);

		TS_ASSERT(content_eq(h, false_link));

	}


	void test_atomese_combo_null_vertex(void)
	{
		combo::combo_tree tr = combo::str2combo_tree("null_vertex($1 $2)", {});

		combo::ComboToAtomese to_atomese;
		Handle h = to_atomese(tr);
		Handle predicate_node = createNode(PREDICATE_NODE, "$1");
		Handle predicate_node2 = createNode(PREDICATE_NODE, "$2");

		HandleSeq handleSeq = {predicate_node, predicate_node2};

		Handle false_link = createLink(handleSeq, LINK);

		TS_ASSERT(content_eq(h, false_link));

	}

	void test_atomese_combo_arguments(void)
	{
		combo::combo_tree tr = combo::str2combo_tree("$1", {});

		combo::ComboToAtomese to_atomese;
		Handle h = to_atomese(tr);

		Handle predicate_node = createNode(PREDICATE_NODE, "$1");

		TS_ASSERT(content_eq(predicate_node, h));
	}

	void test_atomese_combo_contin(void)
	{
		combo::combo_tree tr = combo::str2combo_tree("*(1 2)", {});

		combo::ComboToAtomese to_atomese;
		Handle h = to_atomese(tr);

		HandleSeq list_plus = {Handle(createNumberNode(1)), Handle(createNumberNode(2))};
		Handle times_link = createLink(list_plus, TIMES_LINK);

		TS_ASSERT(content_eq(h, times_link));
	}

	void test_atomese_combo_labeled(void)
	{
		combo::combo_tree tr = combo::str2combo_tree("+($1 +($2 $3))", {});

		combo::ComboToAtomese to_atomese;
		const std::vector<std::string> labels = {"z", "x", "y"};
		Handle result = to_atomese(tr, labels);

		Handle p1 = createNode(SCHEMA_NODE, "$x");
		Handle p2 = createNode(SCHEMA_NODE, "$y");
		Handle p3 = createNode(SCHEMA_NODE, "$z");

		HandleSeq seq = {p1, p2};
		Handle pluslink = createLink(seq, PLUS_LINK);

		HandleSeq prog_seq = {p3, pluslink};
		Handle program = createLink(prog_seq, PLUS_LINK);

		TS_ASSERT(content_eq(program, result));
	}

	void test_combo_atomese_predicate1()
	{
		Handle p1 = createNode(PREDICATE_NODE, "$x");
		Handle p2 = createNode(PREDICATE_NODE, "$y");
		Handle p3 = createNode(PREDICATE_NODE, "$z");

		HandleSeq seq = {p1, p2};
		Handle andlink = createLink(seq, AND_LINK);

		HandleSeq prog_seq = {andlink, p3};
		Handle program = createLink(prog_seq, AND_LINK);

		combo::AtomeseToCombo to_combo;
		auto result = to_combo(program);

		// Note: AndLink is unordered_link meaning the order might require caution.
		// The order of the labels and the child nodes in the generated combo depends
		// on the atomese programs' order of out_going_set.
		const std::vector<string> exp_labels = {"z", "x", "y"};
		auto expected = std::make_pair(combo::str2combo_tree("and($1 and($2 $3))", {}), exp_labels);

		TS_ASSERT_EQUALS(result, expected);
	}

	void test_combo_atomese_predicate2()
	{
		Handle p1 = createNode(PREDICATE_NODE, "$x");
		Handle p2 = createLink(FALSE_LINK);
		Handle p3 = createLink(TRUE_LINK);

		HandleSeq seq = {p1, p2};
		Handle orlink = createLink(seq, OR_LINK);

		HandleSeq prog_seq = {orlink, p3};
		Handle program = createLink(prog_seq, AND_LINK);

		combo::AtomeseToCombo to_combo;
		auto result = to_combo(program);

		const std::vector<string> exp_labels = {"x"};
		auto expected = std::make_pair(combo::str2combo_tree("and(true or($1 false))", {}), exp_labels);

		TS_ASSERT_EQUALS(result, expected);
	}

	void test_combo_atomese_schema()
	{
		Handle n = createNode(NUMBER_NODE, "5");
		Handle f = createNode(SCHEMA_NODE, "$f");
		HandleSeq seq = {n, f};
		Handle plus = createLink(seq, PLUS_LINK);

		combo::AtomeseToCombo to_combo;
		auto result = to_combo(plus);

		const std::vector<string> exp_labels = {"f"};
		auto expected = std::make_pair(combo::str2combo_tree("+(5 $1)", {}), exp_labels);

		TS_ASSERT_EQUALS(result, expected);
	}

	void test_combo_atomese()
	{
		Handle p1 = createNode(PREDICATE_NODE, "$x");
		Handle p2 = createNode(PREDICATE_NODE, "$y");
		Handle p3 = createNode(PREDICATE_NODE, "$z");

		HandleSeq seq = {p1, p2};
		Handle andlink = createLink(seq, AND_LINK);

		HandleSeq prog_seq = {andlink, p3};
		Handle program = createLink(prog_seq, AND_LINK);

		combo::AtomeseToCombo to_combo;
		auto combo_result = to_combo(program);

		combo::ComboToAtomese to_atomese;
		Handle result = to_atomese(combo_result.first, combo_result.second);

		TS_ASSERT(content_eq(result, program));
	}
};
